# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  login: String
  role: UserRoleType
  room: Room
  game: Game
  ownedRoom: Room
  password: PasswordState
  language: UserLanguageType
  createdAt: DateTime
}

enum UserRoleType {
  admin
  user
}

type PasswordState {
  isSet: Boolean!
}

enum UserLanguageType {
  unset
  en
  ru
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  login: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  login: StringFilter
  role: UserRoleTypeNullableFilter
  room: RoomWhereInput
  game: GameWhereInput
  ownedRoom: RoomWhereInput
  language: UserLanguageTypeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input UserLanguageTypeNullableFilter {
  equals: UserLanguageType
  in: [UserLanguageType!]
  notIn: [UserLanguageType!]
  not: UserLanguageTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  login: OrderDirection
  role: OrderDirection
  language: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  login: String
  role: UserRoleType
  room: RoomRelateToOneForUpdateInput
  game: GameRelateToOneForUpdateInput
  ownedRoom: RoomRelateToOneForUpdateInput
  password: String
  language: UserLanguageType
}

input RoomRelateToOneForUpdateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
  disconnect: Boolean
}

input GameRelateToOneForUpdateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  login: String
  role: UserRoleType
  room: RoomRelateToOneForCreateInput
  game: GameRelateToOneForCreateInput
  ownedRoom: RoomRelateToOneForCreateInput
  password: String
  language: UserLanguageType
}

input RoomRelateToOneForCreateInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
}

input GameRelateToOneForCreateInput {
  create: GameCreateInput
  connect: GameWhereUniqueInput
}

type Room {
  id: ID!
  speed: Int
  type: RoomTypeType
  password: String
  bots(where: BotWhereInput! = {}, orderBy: [BotOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BotWhereUniqueInput): [Bot!]
  botsCount(where: BotWhereInput! = {}): Int
  owner: User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
}

enum RoomTypeType {
  public
  private
}

input RoomWhereUniqueInput {
  id: ID
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  id: IDFilter
  speed: IntNullableFilter
  type: RoomTypeTypeNullableFilter
  password: StringFilter
  bots: BotManyRelationFilter
  owner: UserWhereInput
  users: UserManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input RoomTypeTypeNullableFilter {
  equals: RoomTypeType
  in: [RoomTypeType!]
  notIn: [RoomTypeType!]
  not: RoomTypeTypeNullableFilter
}

input BotManyRelationFilter {
  every: BotWhereInput
  some: BotWhereInput
  none: BotWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoomOrderByInput {
  id: OrderDirection
  speed: OrderDirection
  type: OrderDirection
  password: OrderDirection
  createdAt: OrderDirection
}

input RoomCreateInput {
  speed: Int
  type: RoomTypeType
  password: String
  bots: BotRelateToManyForCreateInput
  owner: UserRelateToOneForCreateInput
  users: UserRelateToManyForCreateInput
}

input BotRelateToManyForCreateInput {
  connect: [BotWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Bot {
  id: ID!
  login: String
  room: Room
  accuracy: Int
  game: Game
}

input BotWhereUniqueInput {
  id: ID
  login: String
}

input BotWhereInput {
  AND: [BotWhereInput!]
  OR: [BotWhereInput!]
  NOT: [BotWhereInput!]
  id: IDFilter
  login: StringFilter
  room: RoomWhereInput
  accuracy: IntNullableFilter
  game: GameWhereInput
}

input BotOrderByInput {
  id: OrderDirection
  login: OrderDirection
  accuracy: OrderDirection
}

type Game {
  id: ID!
  speed: Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  bots(where: BotWhereInput! = {}, orderBy: [BotOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BotWhereUniqueInput): [Bot!]
  botsCount(where: BotWhereInput! = {}): Int
  gameStatus: GameGameStatusType
  createdAt: DateTime
  step: Int
  balls: JSON
  playerBallBinds(where: PlayerBallBindWhereInput! = {}, orderBy: [PlayerBallBindOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlayerBallBindWhereUniqueInput): [PlayerBallBind!]
  playerBallBindsCount(where: PlayerBallBindWhereInput! = {}): Int
}

enum GameGameStatusType {
  waiting
  playing
  finished
}

input GameWhereUniqueInput {
  id: ID
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
  speed: IntFilter
  users: UserManyRelationFilter
  bots: BotManyRelationFilter
  gameStatus: GameGameStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  step: IntFilter
  playerBallBinds: PlayerBallBindManyRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input GameGameStatusTypeNullableFilter {
  equals: GameGameStatusType
  in: [GameGameStatusType!]
  notIn: [GameGameStatusType!]
  not: GameGameStatusTypeNullableFilter
}

input PlayerBallBindManyRelationFilter {
  every: PlayerBallBindWhereInput
  some: PlayerBallBindWhereInput
  none: PlayerBallBindWhereInput
}

input GameOrderByInput {
  id: OrderDirection
  speed: OrderDirection
  gameStatus: OrderDirection
  createdAt: OrderDirection
  step: OrderDirection
}

input GameUpdateInput {
  speed: Int
  users: UserRelateToManyForUpdateInput
  bots: BotRelateToManyForUpdateInput
  gameStatus: GameGameStatusType
  step: Int
  balls: JSON
  playerBallBinds: PlayerBallBindRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input BotRelateToManyForUpdateInput {
  disconnect: [BotWhereUniqueInput!]
  set: [BotWhereUniqueInput!]
  connect: [BotWhereUniqueInput!]
}

input PlayerBallBindRelateToManyForUpdateInput {
  disconnect: [PlayerBallBindWhereUniqueInput!]
  set: [PlayerBallBindWhereUniqueInput!]
  create: [PlayerBallBindCreateInput!]
  connect: [PlayerBallBindWhereUniqueInput!]
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  speed: Int
  users: UserRelateToManyForCreateInput
  bots: BotRelateToManyForCreateInput
  gameStatus: GameGameStatusType
  step: Int
  playerBallBinds: PlayerBallBindRelateToManyForCreateInput
}

input PlayerBallBindRelateToManyForCreateInput {
  create: [PlayerBallBindCreateInput!]
  connect: [PlayerBallBindWhereUniqueInput!]
}

type PlayerBallBind {
  id: ID!
  user: User
  bot: Bot
  number: Int
  card: Card
  createdAt: DateTime
  game: Game
}

input PlayerBallBindWhereUniqueInput {
  id: ID
}

input PlayerBallBindWhereInput {
  AND: [PlayerBallBindWhereInput!]
  OR: [PlayerBallBindWhereInput!]
  NOT: [PlayerBallBindWhereInput!]
  id: IDFilter
  user: UserWhereInput
  bot: BotWhereInput
  number: IntFilter
  card: CardWhereInput
  createdAt: DateTimeNullableFilter
  game: GameWhereInput
}

input PlayerBallBindOrderByInput {
  id: OrderDirection
  number: OrderDirection
  createdAt: OrderDirection
}

input PlayerBallBindUpdateInput {
  user: UserRelateToOneForUpdateInput
  bot: BotRelateToOneForUpdateInput
  number: Int
  card: CardRelateToOneForUpdateInput
  game: GameRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input BotRelateToOneForUpdateInput {
  connect: BotWhereUniqueInput
  disconnect: Boolean
}

input CardRelateToOneForUpdateInput {
  create: CardCreateInput
  connect: CardWhereUniqueInput
  disconnect: Boolean
}

input PlayerBallBindUpdateArgs {
  where: PlayerBallBindWhereUniqueInput!
  data: PlayerBallBindUpdateInput!
}

input PlayerBallBindCreateInput {
  user: UserRelateToOneForCreateInput
  bot: BotRelateToOneForCreateInput
  number: Int
  card: CardRelateToOneForCreateInput
  game: GameRelateToOneForCreateInput
}

input BotRelateToOneForCreateInput {
  connect: BotWhereUniqueInput
}

input CardRelateToOneForCreateInput {
  create: CardCreateInput
  connect: CardWhereUniqueInput
}

type Card {
  id: ID!
  game: Game
  user: User
  bot: Bot
  numbers: JSON
  board: JSON
}

input CardWhereUniqueInput {
  id: ID
}

input CardWhereInput {
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
  id: IDFilter
  game: GameWhereInput
  user: UserWhereInput
  bot: BotWhereInput
}

input CardOrderByInput {
  id: OrderDirection
}

input CardUpdateInput {
  game: GameRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  bot: BotRelateToOneForUpdateInput
  numbers: JSON
  board: JSON
}

input CardUpdateArgs {
  where: CardWhereUniqueInput!
  data: CardUpdateInput!
}

input CardCreateInput {
  game: GameRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  bot: BotRelateToOneForCreateInput
  numbers: JSON
  board: JSON
}

type GameResult {
  id: ID!
  winnerPlayerLogin: String
  createdAt: DateTime
  players(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  playersCount(where: UserWhereInput! = {}): Int
  gameId: String
  gameDifficulty: Int
}

input GameResultWhereUniqueInput {
  id: ID
}

input GameResultWhereInput {
  AND: [GameResultWhereInput!]
  OR: [GameResultWhereInput!]
  NOT: [GameResultWhereInput!]
  id: IDFilter
  winnerPlayerLogin: StringFilter
  createdAt: DateTimeNullableFilter
  players: UserManyRelationFilter
  gameId: StringFilter
  gameDifficulty: IntFilter
}

input GameResultOrderByInput {
  id: OrderDirection
  winnerPlayerLogin: OrderDirection
  createdAt: OrderDirection
  gameId: OrderDirection
  gameDifficulty: OrderDirection
}

input GameResultUpdateInput {
  winnerPlayerLogin: String
  players: UserRelateToManyForUpdateInput
  gameId: String
  gameDifficulty: Int
}

input GameResultUpdateArgs {
  where: GameResultWhereUniqueInput!
  data: GameResultUpdateInput!
}

input GameResultCreateInput {
  winnerPlayerLogin: String
  players: UserRelateToManyForCreateInput
  gameId: String
  gameDifficulty: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRoom(data: RoomCreateInput!): Room
  createRooms(data: [RoomCreateInput!]!): [Room]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  createPlayerBallBind(data: PlayerBallBindCreateInput!): PlayerBallBind
  createPlayerBallBinds(data: [PlayerBallBindCreateInput!]!): [PlayerBallBind]
  updatePlayerBallBind(where: PlayerBallBindWhereUniqueInput!, data: PlayerBallBindUpdateInput!): PlayerBallBind
  updatePlayerBallBinds(data: [PlayerBallBindUpdateArgs!]!): [PlayerBallBind]
  deletePlayerBallBind(where: PlayerBallBindWhereUniqueInput!): PlayerBallBind
  deletePlayerBallBinds(where: [PlayerBallBindWhereUniqueInput!]!): [PlayerBallBind]
  createCard(data: CardCreateInput!): Card
  createCards(data: [CardCreateInput!]!): [Card]
  updateCard(where: CardWhereUniqueInput!, data: CardUpdateInput!): Card
  updateCards(data: [CardUpdateArgs!]!): [Card]
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteCards(where: [CardWhereUniqueInput!]!): [Card]
  createGameResult(data: GameResultCreateInput!): GameResult
  createGameResults(data: [GameResultCreateInput!]!): [GameResult]
  updateGameResult(where: GameResultWhereUniqueInput!, data: GameResultUpdateInput!): GameResult
  updateGameResults(data: [GameResultUpdateArgs!]!): [GameResult]
  deleteGameResult(where: GameResultWhereUniqueInput!): GameResult
  deleteGameResults(where: [GameResultWhereUniqueInput!]!): [GameResult]
  endSession: Boolean!
  authenticateUserWithPassword(login: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  registerUserWithLoginAndPassword(login: String!, password: String!): UserAuthenticationWithPasswordResult
  joinRoom(roomId: ID!): joinRoomResult
  exitRoom: ExitRoomResult
  joinPrivateRoom(roomId: ID!, password: String!): JoinPrivateRoomResult!
  exitGame: ExitGameResult!
  startGame: StartPrivateGameResult!
  selectBall(number: Int!, cardId: ID!): SelectBallResult!
}

union joinRoomResult = JoinRoomSuccess | JoinRoomFailure

type JoinRoomSuccess {
  roomId: ID!
}

type JoinRoomFailure {
  message: String!
}

union ExitRoomResult = ExitRoomSuccess | ExitRoomFailure

type ExitRoomSuccess {
  ok: Boolean
}

type ExitRoomFailure {
  message: String!
}

type JoinPrivateRoomResult {
  success: Boolean!
  message: String
}

type ExitGameResult {
  success: Boolean!
  message: String
}

type StartPrivateGameResult {
  success: Boolean!
  message: String
}

type SelectBallResult {
  success: Boolean!
  message: String
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  login: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  rooms(where: RoomWhereInput! = {}, orderBy: [RoomOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoomWhereUniqueInput): [Room!]
  room(where: RoomWhereUniqueInput!): Room
  roomsCount(where: RoomWhereInput! = {}): Int
  bots(where: BotWhereInput! = {}, orderBy: [BotOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BotWhereUniqueInput): [Bot!]
  bot(where: BotWhereUniqueInput!): Bot
  botsCount(where: BotWhereInput! = {}): Int
  games(where: GameWhereInput! = {}, orderBy: [GameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GameWhereUniqueInput): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  playerBallBinds(where: PlayerBallBindWhereInput! = {}, orderBy: [PlayerBallBindOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PlayerBallBindWhereUniqueInput): [PlayerBallBind!]
  playerBallBind(where: PlayerBallBindWhereUniqueInput!): PlayerBallBind
  playerBallBindsCount(where: PlayerBallBindWhereInput! = {}): Int
  cards(where: CardWhereInput! = {}, orderBy: [CardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CardWhereUniqueInput): [Card!]
  card(where: CardWhereUniqueInput!): Card
  cardsCount(where: CardWhereInput! = {}): Int
  gameResults(where: GameResultWhereInput! = {}, orderBy: [GameResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GameResultWhereUniqueInput): [GameResult!]
  gameResult(where: GameResultWhereUniqueInput!): GameResult
  gameResultsCount(where: GameResultWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  gamePlayerProgress: [Player!]!
  gameBallSet: GameBalls!
  selectedBalls(cardIds: [ID!]!): [CardWithSelectedBalls]!
  personalStatsRating(offset: Int!): PersonalStatsRating!
  totalStatsRating(offset: Int!, page: Int!): TotalStatsRating!
}

type Player {
  id: ID!
  login: String!
  progress: [Int!]
}

type GameBalls {
  gameStatus: String!
  balls: [Int!]!
}

type CardWithSelectedBalls {
  cardId: ID!
  balls: [Int!]!
}

type PersonalStatsRating {
  winRating: Int
  skillRating: Float
  gamesPlayed: Int
  offset: Int!
}

type TotalStatsRating {
  winRating: [UserRating!]
  skillRating: [UserRating!]
  selfRating: SelfRating
  offset: Int!
  page: Int!
}

type UserRating {
  login: String
  stat: Float
}

type SelfRating {
  winRating: Int
  skillRating: Float
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
