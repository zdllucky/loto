// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

model User {
  id                         String           @id @default(cuid())
  login                      String           @unique @default("")
  role                       UserRoleType     @default(user)
  room                       Room?            @relation("User_room", fields: [roomId], references: [id])
  roomId                     String?          @map("room")
  game                       Game?            @relation("User_game", fields: [gameId], references: [id])
  gameId                     String?          @map("game")
  password                   String
  createdAt                  DateTime?        @default(now())
  from_PlayerBallBind_user   PlayerBallBind[] @relation("PlayerBallBind_user")
  from_Card_user             Card[]           @relation("Card_user")
  from_GameResult_winnerUser GameResult[]     @relation("GameResult_winnerUser")

  @@index([roomId])
  @@index([gameId])
  @@index([createdAt])
}

model Room {
  id        String    @id @default(cuid())
  speed     Int?
  bots      Bot[]     @relation("Bot_room")
  users     User[]    @relation("User_room")
  createdAt DateTime? @default(now())

  @@index([createdAt])
}

model Bot {
  id                      String           @id @default(cuid())
  login                   String           @unique @default("")
  room                    Room?            @relation("Bot_room", fields: [roomId], references: [id])
  roomId                  String?          @map("room")
  accuracy                Int?             @default(9800)
  game                    Game?            @relation("Bot_game", fields: [gameId], references: [id])
  gameId                  String?          @map("game")
  from_PlayerBallBind_bot PlayerBallBind[] @relation("PlayerBallBind_bot")
  from_Card_bot           Card[]           @relation("Card_bot")

  @@index([roomId])
  @@index([gameId])
}

model Game {
  id              String              @id @default(cuid())
  speed           Int                 @default(2)
  result          GameResult?         @relation("Game_result", fields: [resultId], references: [id])
  resultId        String?             @unique @map("result")
  users           User[]              @relation("User_game")
  bots            Bot[]               @relation("Bot_game")
  gameStatus      GameGameStatusType? @default(waiting)
  createdAt       DateTime?           @default(now())
  step            Int                 @default(0)
  balls           Json?               @default("[]")
  playerBallBinds PlayerBallBind[]    @relation("PlayerBallBind_game")
  from_Card_game  Card[]              @relation("Card_game")

  @@index([createdAt])
}

model PlayerBallBind {
  id        String    @id @default(cuid())
  user      User?     @relation("PlayerBallBind_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  bot       Bot?      @relation("PlayerBallBind_bot", fields: [botId], references: [id])
  botId     String?   @map("bot")
  number    Int
  card      Card?     @relation("PlayerBallBind_card", fields: [cardId], references: [id])
  cardId    String?   @map("card")
  createdAt DateTime? @default(now())
  game      Game?     @relation("PlayerBallBind_game", fields: [gameId], references: [id])
  gameId    String?   @map("game")

  @@index([userId])
  @@index([botId])
  @@index([number])
  @@index([cardId])
  @@index([createdAt])
  @@index([gameId])
}

model Card {
  id                       String           @id @default(cuid())
  game                     Game?            @relation("Card_game", fields: [gameId], references: [id])
  gameId                   String?          @map("game")
  user                     User?            @relation("Card_user", fields: [userId], references: [id])
  userId                   String?          @map("user")
  bot                      Bot?             @relation("Card_bot", fields: [botId], references: [id])
  botId                    String?          @map("bot")
  numbers                  Json?
  board                    Json?
  from_PlayerBallBind_card PlayerBallBind[] @relation("PlayerBallBind_card")

  @@index([gameId])
  @@index([userId])
  @@index([botId])
}

model GameResult {
  id             String    @id @default(cuid())
  winnerBotLogin String    @default("")
  winnerUser     User?     @relation("GameResult_winnerUser", fields: [winnerUserId], references: [id])
  winnerUserId   String?   @map("winnerUser")
  createdAt      DateTime? @default(now())
  game           Game?     @relation("Game_result")

  @@index([winnerUserId])
  @@index([createdAt])
}

enum UserRoleType {
  admin
  user
}

enum GameGameStatusType {
  waiting
  playing
  finished
}

generator zod {
  provider              = "zod-prisma"
  output                = "./server/rest/zod"
  relationModel         = true
  modelCase             = "PascalCase"
  modelSuffix           = "Model"
  useDecimalJs          = true
  prismaJsonNullability = true
}
